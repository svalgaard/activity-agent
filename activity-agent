#! /usr/bin/python3
#
#

import Quartz  # Please install pyobjc
import argparse
import datetime
import os
import socket
import sys

ME = 'activity-agent'
MIN_DT = 240  # require MIN_DT seconds before a timestamp is considered missing
MIN_BREAK = 15*60  # ignore locked screen for less than MIN_BREAK seconds
LOG_DN = os.path.expanduser(f'~/.{ME}/logs/')
LOG_FN = f'{ME}-%Y-%m-%d.log'
DT_FMT = '%a %b %d %Y %H:%M:%S %Z'
PLIST = f'''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>activity-agent</string>
    <key>LimitLoadToSessionType</key>
    <string>Aqua</string>
    <key>ProgramArguments</key>
    <array>
        <string>bash</string>
        <string>-c</string>
        <string>"{os.path.abspath(sys.argv[0])}" writelog</string>
    </array>
    <key>StandardErrorPath</key>
    <string>/dev/null</string>
    <key>StandardOutPath</key>
    <string>/dev/null</string>
    <key>StartInterval</key>
    <integer>60</integer>
</dict>
</plist>
'''


class State:
    def __init__(self, start, end, state):
        self.start = start
        self.end = end
        self.state = state

    def __repr__(self):
        return f'<{self.start} {self.end} {self.state}>'

    def __len__(self):
        return timeDiff(self.start, self.end)


def setupLogDir():
    global LOG_DN

    hostname = socket.gethostname()
    hostname = hostname.split('.')[0]
    if hostname:
        LOG_DN = os.path.expanduser(f'~/.{ME}/logs-{hostname}/')


def install():
    spfn = f'{ME}.plist'
    pfn = os.path.expanduser(f'~/Library/LaunchAgents/{spfn}')
    open(pfn, 'w').write(PLIST)

    cmd = f'launchctl load {pfn}'
    print(cmd)
    os.system(cmd)


def uninstall():
    spfn = f'{ME}.plist'
    pfn = os.path.expanduser(f'~/Library/LaunchAgents/{spfn}')

    cmd = f'launchctl unload {pfn}'
    print(cmd)
    os.system(cmd)

    if os.path.isfile(pfn):
        os.unlink(pfn)


def getState():
    try:
        d = Quartz.CGSessionCopyCurrentDictionary()
    except:
        d = None

    if not d:
        status = 'Unknown'
    elif d.get("CGSSessionScreenIsLocked", 0) == 0:
        status = 'Active'
    elif d.get("kCGSSessionOnConsoleKey", 0) == 1:
        status = 'Locked'
    else:
        status = 'Unknown'

    return status


def writeLog():
    if not os.path.isdir(LOG_DN):
        os.makedirs(LOG_DN)
    now = datetime.datetime.now().astimezone()
    fn = os.path.join(LOG_DN, now.strftime(LOG_FN))

    state = getState()
    dt = now.strftime(DT_FMT)
    log = '%s - %s' % (dt, state)

    open(fn, 'a').write(log+'\n')


def timeDiff(dt1, dt2):
    '''Number of seconds from dt1 to dt2'''
    return int((dt2 - dt1).total_seconds())


def readLog(lfn):
    tmp = []
    with open(lfn) as fd:
        for line in fd:
            line = line.strip()
            sp = line.split(' - ')
            if not line or len(sp) != 2:
                continue
            dt, state = sp
            dt = datetime.datetime.strptime(dt, DT_FMT)
            tmp.append(State(dt, dt, state))

    if not tmp:
        return []

    return tmp


def cleanLogLines(loglines, lockedoff):
    dt = datetime.timedelta(seconds=MIN_DT)

    # Ensure that we are consistent around midnight
    first = loglines[0]
    midnight = first.start.replace(hour=0, minute=0, second=0)
    if first.start <= midnight + dt:
        first.start = midnight
    else:
        loglines.insert(0, State(midnight, midnight, 'Off'))

    last = loglines[-1]
    midnight2 = last.end.replace(hour=23, minute=59, second=59)
    if midnight2 < datetime.datetime.now():
        if last.end + dt < midnight2:
            loglines.append(State(midnight2, midnight2, 'Off'))
        else:
            last.end = midnight2

    # Put Off in log file when we have no logs for a long time
    i = 1
    while i < len(loglines):
        expstart = loglines[i-1].end + dt
        expend = loglines[i].start
        if expstart < expend:
            st = State(expstart, expend, 'Off')
            loglines.insert(i, st)
        i += 1

    # Check that we have no missing holes
    for i in range(1, len(loglines)):
        prev, cur = loglines[i-1], loglines[i]
        assert(timeDiff(prev.end, cur.start) <= MIN_DT)

    # Maybe use Locked/off
    if not lockedoff:
        for st in loglines:
            if st.state.lower() in ['off', 'locked']:
                st.state = 'Locked/off'

    # Join adjacent same states
    i = len(loglines) - 1
    while i >= 1:
        prev, cur = loglines[i-1], loglines[i]
        if prev.state == cur.state:
            prev.end = cur.end
            del loglines[i]
        i -= 1

    # Ignore short breaks
    i = len(loglines) - 1
    while i >= 2:
        prev, cur = loglines[i-1], loglines[i]
        pprev, prev, cur = loglines[i-2], loglines[i-1], loglines[i]

        if pprev.state == cur.state == 'Active' and len(prev) <= MIN_BREAK:
            # we have a short break between two active sessions
            del loglines[i-1:i+1]
            pprev.end = cur.end
            i -= 2
        else:
            i -= 1

    # Ignore short breaks
    i = len(loglines) - 1
    while i >= 2:
        prev, cur = loglines[i-1], loglines[i]
        pprev, prev, cur = loglines[i-2], loglines[i-1], loglines[i]

        if pprev.state == cur.state and prev.state == 'Active' \
                and len(prev) <= MIN_BREAK:
            # we have a short activity burst between two inactive sessions
            del loglines[i-1:i+1]
            pprev.end = cur.end
            i -= 2
        else:
            i -= 1

    i = 1
    while i < len(loglines):
        prev, cur = loglines[i-1], loglines[i]

        if i >= 2:
            pprev = loglines[i-2]
            ss = set([pprev.state, cur.state])

            if ss == ['Active'] and len(prev) < MIN_BREAK:
                # we have a short break between active sessions
                cur.start = prev.start
                del loglines[i-1]
                i -= 1
                continue

            # if pprev.state != 'Active' and cur.state !=

        i += 1

    return loglines


def printLogLines(logLines):
    if not logLines:
        return

    lastDay = logLines[0].start.date()
    for st in logLines:
        if st.start.date() != lastDay and st.start.hour >= 6:
            lastDay = st.start.date()
            print()
        # s = timeDiff(start, end)
        print(st.start.strftime(DT_FMT), '-', st.state)


def showLog(days, lockedoff):
    if not os.path.isdir(LOG_DN):
        return

    # go at most DAYS days back
    fns = sorted(os.listdir(LOG_DN))
    del fns[:-days]

    lls = []
    for fn in fns:
        lfn = os.path.join(LOG_DN, fn)
        lls.extend(readLog(lfn))

    lls = cleanLogLines(lls, lockedoff)
    printLogLines(lls)


def main():
    global LOG_DN
    setupLogDir()

    parser = argparse.ArgumentParser()
    parser.add_argument("-l", "--log-dir", metavar='DIR',
                        dest='logdn',
                        default=LOG_DN,
                        help=f'location of log directory. Default: {LOG_DN}')
    parser.add_argument("-d", "--days", metavar='DAYS',
                        dest='days', type=int,
                        default=14,
                        help='look at logs at most DAYS days old. Default: 14')
    parser.add_argument("--lockedoff", dest='lockedoff',
                        action='store_true',
                        help='when printing logs, distinguish between '
                        'off and locked state')
    # parser.add_argument("-v", "--verbose", action="store_true")
    parser.add_argument("COMMAND", help="writelog", choices=[
        'writelog',
        'logs',
        'reinstall',
        'install',
        'uninstall',
        'remove',
    ])
    args = parser.parse_args()
    LOG_DN = args.logdn
    command = args.COMMAND

    if command == 'writelog':
        writeLog()
    elif command == 'logs':
        showLog(args.days, args.lockedoff)
    elif command == 'reinstall':
        uninstall()
        install()
    elif command == 'install':
        install()
    elif command in ['uninstall', 'remove']:
        uninstall()
    else:
        print(f'Unknown command: {command!r}')


main()
